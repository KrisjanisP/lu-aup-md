## 2. semestris

=== F21 =======================================

Izveidot programmu valodā C++, kas apstrādā teksta failu secīgā režīmā.
Dati no faila jānolasa pa vienai rindiņai. Nedrīkst dublēt visa faila saturu operatīvajā atmiņā.
Sīkākas prasības sk. Laboratorijas darbu noteikumos.

F21. Dots teksta fails, kurā atrodas sintaktiski pareizs C++ programmas teksts. Saskaitīt , cik if operatoru un cik cikla operatoru (for, while) satur dotā programma. Drīkst uzskatīt, ka programmas tekstā nav komentāru un ka attiecīgie simboli neparādīsies teksta literāļos.


=== G17 =======================================

Izveidot divas programmas valodā C++, kas strādā ar vērtību virkni divos dažādos veidos:
  1) to realizējot kā vienvirziena saistīto sarakstu, izmantojot dinamiskas datu struktūras,
  2) izmantojot STL::list konteineru.
Abās realizācijās ir jāizveido prasītā specifiskā vērtību virknes apstrādes funkcija un jānodemonstrē tā darbībā,
cita starpā parādot gan sākotnējās, gan rezultējošās vērtības.
Abās programmās:  
  a) jābūt iespējai ievadīt saraksta elementus (izveidot patvaļīgu sarakstu),
  b) jāpielieto uzrakstītā funkcija sarakstam,  
  c) jāizdrukā saraksts pēc funkcijas darbības.  
  d) beigās jāiznīcina saraksts - korekti jāatbrīvo izdalītā atmiņa(lietojot delete vai clear).
Sīkākas prasības sk. Laboratorijas darbu noteikumos.

G17. Uzrakstīt funkciju, kas atrod saraksta otro lielāko elementu, ja tāds eksistē un pārvieto to uz saraksta beigām. Darbība jāveic, pārkabinot saites, nevis pārkopējot elementu vērtības.


=== H6 =======================================

Izveidot programmu valodā C++.  Ja programma darbojas ar failu, nedrīkst dublēt visa faila saturu operatīvajā atmiņā.
Ar faila komponenti tiek saprasts fiksēta garuma ieraksts. Sīkākās prasības sk. Laboratorijas darbu noteikumos.

H6. Dots teksta fails. Atrast tekstā 5 viesbiežāk sastopamos blakus esošu (latīņu alfabēta) burtu pārus (nešķirojot reģistru). Izdrukāt burtu pārus pēc to sastapšanas reižu skaita dilstošā secībā, pievienojot arī sastapšanas biežumu (piemēram, he 289, th 288, an 187, in 147, nd 137). Informācijas glabāšanai pirms izdrukas failā izmantot vārdnīcu STL map un/vai STL list.


=== GG =========================================

GG - STL list un saistītais saraksts ar izņēmumsituāciju apstrādi un vienībtestēšanu**.

* atrisināt uzdevumu G divos veidos:
  a) izmantojot dinamiskas datu struktūras (saistīto sarakstu vtml.),
  b) izmantojot STL::list konteineru.

** tas pats uzdevums, kas G, bet tā risinājums (a) jāpapildina ar divām lietām:
  1) vismaz viena no datu pārbaudēm jārealizē, izmantojot izņēmumsituāciju apstrādes (exception handling) mehānismu,
  2) vismaz viena funkcija (vēlams, galvenā) ir jānotestē, izmantojot vienībtestēšanu, kur attiecīgā funkcija būtu jāpārbauda uz vismaz trīs dažādiem nosacījumiem;
     šim nolūkam, kā minimums, ir nepieciešams:
     (1) šo funkciju iznest ārā citā failā (nekā funkcija main),
     (2) izveidot otru projektu speciāli šīs funkcijās testēšanai (tātad, kopā būs divi projekti, parastais, kas izmantos funkciju, otrais, kas testēs).

Papildus norāde: šādam vienībtestēšanas projektam daļēji atbilst iepriekšējā semestra pēdējais laboratorijas darbs (ar klasēm) ar cieti iekodētu main funkciju.

## 1. semestris

=== A29 =======================================

Izveidot programmu gan C++, gan Python.
Ievadot loģiski nepareizus datus, programmai jāizdod atbilstošs paziņojums. Jābūt iespējai programmu izpildīt atkārtoti. Atrādot programmu, jāatrāda:
  a) programmas teksts,  
  b) testa piemēri,  
  c) programma darbībā.
Precīzākas prasības sk. Laboratorijas darbu noteikumos.

A29. Doti divi naturāli skaitļi. Atrast visus abu skaitļu kopīgus dalītājus.


=== B14 =======================================

Izveidot programmu gan C++, gan Python, obligāti izmantojot norādītās vai kādas citas funkcijas.
Prasības tādas pašas kā iepriekšējā uzdevumā, precīzāk sk. Laboratorijas darbu noteikumos.

B14. Dots naturāls skaitlis n. Noskaidrot, vai n! var izteikt kā trīs pēc kārtas ņemtu skaitļu reizinājumu. Risinājumā izmantot funkciju, kas aprēķina faktoriālu.


=== C37 =======================================

Izveidot programmu valodā C++, obligāti izmantojot norādītās vai kādas citas funkcijas.
Prasības tādas pašas kā iepriekšējā uzdevumā, precīzāk sk. Laboratorijas darbu noteikumos.

C37. Neizmantojot iebūvētās heksadecimālās izdrukas iespējas, izdrukāt reizrēķina tabulu sešpadsmitnieku skaitīšanas sistēmā. (No 1*1 līdz F*F).


=== D20 =======================================

Izveidot programmu valodā C++, izmantojot objektorientētās programmēšanas līdzekļus
un strukturējot programmu vismaz trīs failos.
Klases hederi obligāti novietot atsevišķā hedera failā (program.h).
Visas metodes realizēt ārpus hedera faila – speciālā C++ failā (program.cpp).
Funkcija main ievietojama vēl citā C++ failā (main.cpp).
Klases dati pēc noklusēšanas ir slēpti (private), bet metodes atklātas (public).
Šīs programmas ietvaros NAV obligāti jānodrošina tāda lietotāja saskarne,
kāda tika prasīta iepriekšējos trīs uzdevumos (main funkciju drīkst “cieti” iekodēt).
Citas prasības sk. Laboratorijas darbu noteikumos.

D20. Izveidot klasi ""Datums"" - Date, kurā tiek glabāti trīs skaitļi - gads, mēnesis, datums.
Klasei izveidot šādas metodes:
    (1) konstruktors, ar kuru tiek padotas sākotnējās vērtības,
    (2) destruktors, kurš paziņo par objekta likvidēšanu,
    (3) metode ""Mainīt"" - change ar trīs parametriem, kas uzstāda jaunās vērtības,
    (4) metode ""Drukāt"" - print, kas izdrukā datumu,
    (5) metode ""Aprēķināt"" - calculate, kas izdrukā dotā datuma nedēļas dienu.